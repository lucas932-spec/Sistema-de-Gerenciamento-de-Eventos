-- Criação do Banco de Dados
CREATE DATABASE GerenciamentoEventos;
USE GerenciamentoEventos;

-- Criação das Tabelas
CREATE TABLE Eventos (
    id_evento INT AUTO_INCREMENT PRIMARY KEY,
    nome_evento VARCHAR(100) NOT NULL,
    data_evento DATE NOT NULL,
    local_evento VARCHAR(100) NOT NULL,
    descricao TEXT
);

CREATE TABLE Participantes (
    id_participante INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    telefone VARCHAR(20)
);

CREATE TABLE Inscricoes (
    id_inscricao INT AUTO_INCREMENT PRIMARY KEY,
    id_evento INT,
    id_participante INT,
    data_inscricao DATE NOT NULL,
    FOREIGN KEY (id_evento) REFERENCES Eventos(id_evento) ON DELETE CASCADE,
    FOREIGN KEY (id_participante) REFERENCES Participantes(id_participante) ON DELETE CASCADE
);

-- Inserção de Dados

-- Adicionando eventos à tabela de eventos
INSERT INTO Eventos (nome_evento, data_evento, local_evento, descricao) VALUES 
('Conferência de Tecnologia', '2024-10-15', 'Auditório Principal', 'Discussão sobre tendências tecnológicas.'),
('Workshop de Desenvolvimento Web', '2024-11-20', 'Sala de Conferências', 'Um workshop prático sobre desenvolvimento web.'),
('Seminário de Inteligência Artificial', '2024-12-05', 'Auditório 2', 'Seminário sobre IA e suas aplicações.');

-- Adicionando participantes à tabela de participantes
INSERT INTO Participantes (nome, email, telefone) VALUES 
('João Silva', 'joao.silva@email.com', '9999-8888'),
('Maria Fernanda', 'maria.fernanda@email.com', '7777-6666'),
('Carlos Eduardo', 'carlos.eduardo@email.com', '5555-4444');

-- Registrando inscrições relacionando eventos e participantes
INSERT INTO Inscricoes (id_evento, id_participante, data_inscricao) VALUES 
(1, 1, '2024-09-01'),
(1, 2, '2024-09-02'),
(2, 2, '2024-09-03'),
(2, 3, '2024-09-04'),
(3, 1, '2024-09-05');

-- Consultas e Relatórios

-- 1. Visualizar todos os eventos disponíveis
SELECT * FROM Eventos;

-- 2. Consultar a lista de participantes inscritos em um evento específico (ex: Evento com id_evento = 1)
SELECT p.nome AS Nome_Participante, p.email, p.telefone 
FROM Inscricoes i 
JOIN Participantes p ON i.id_participante = p.id_participante 
WHERE i.id_evento = 1;

-- 3. Verificar todos os eventos nos quais um determinado participante está inscrito (ex: Participante com id_participante = 1)
SELECT e.nome_evento, e.data_evento, e.local_evento 
FROM Inscricoes i 
JOIN Eventos e ON i.id_evento = e.id_evento 
WHERE i.id_participante = 1;

-- Tarefas Adicionais

-- Listar todos os participantes que se inscreveram em mais de um evento
SELECT p.nome, COUNT(i.id_evento) AS Total_Inscricoes
FROM Inscricoes i 
JOIN Participantes p ON i.id_participante = p.id_participante 
GROUP BY p.id_participante 
HAVING COUNT(i.id_evento) > 1;

-- Atualização de Dados

-- 1. Atualizar informações de um evento (ex: evento com id_evento = 1)
UPDATE Eventos 
SET local_evento = 'Auditório Novo', data_evento = '2024-10-20' 
WHERE id_evento = 1;

-- 2. Modificar informações de contato de um participante (ex: participante com id_participante = 1)
UPDATE Participantes 
SET email = 'joao.silva_novo@email.com', telefone = '8888-7777' 
WHERE id_participante = 1;

-- Deleção de Dados

-- 1. Remover eventos passados do banco de dados
DELETE FROM Eventos 
WHERE data_evento < CURDATE();

-- 2. Cancelar inscrições de participantes para determinados eventos (ex: inscrição com id_inscricao = 1)
DELETE FROM Inscricoes 
WHERE id_inscricao = 1;

-- Verificação Final

-- Testar todas as operações implementadas para garantir o funcionamento correto
-- (As consultas anteriores já validam a manipulação correta dos dados)
